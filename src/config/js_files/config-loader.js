// src/config/js_files/config-loader.js
const BaseConfigLoader = require("./base-config-loader");
const path = require("path");
const fs = require("fs");

class ConfigLoader extends BaseConfigLoader {
  constructor() {
    super();
    console.log("[ConfigLoader] Constructor: Creando instancia..."); // Log 1
    this.config = {};
    // Definir configPath ANTES de llamar a ensureDirectoryExists o loadConfiguration
    // Ajusta esta ruta relativa si es necesario, bas√°ndose en la ubicaci√≥n de config-loader.js
    // Asumiendo que config-loader.js est√° en src/config/js_files y el JSON en src/config/jsons
    this.configPath = "../jsons/unified-config.json";
    this.currentConfigPath = null; // Inicializar

    this.ensureDirectoryExists();
    console.log("[ConfigLoader] Constructor: Llamando a loadConfiguration inicial..."); // Log 2
    try {
      this.loadConfiguration(); // Carga inicial
    } catch (error) {
      // Es crucial manejar el error aqu√≠ tambi√©n, porque si falla en el constructor,
      // la instancia exportada podr√≠a estar en un estado inv√°lido.
      console.error("üí• [ConfigLoader] ¬°ERROR CR√çTICO DURANTE LA CARGA INICIAL EN EL CONSTRUCTOR!", error.message);
      // Podr√≠amos lanzar el error para detener la aplicaci√≥n inmediatamente,
      // o marcar la instancia como inv√°lida. Lanzar es m√°s seguro para evitar
      // que la aplicaci√≥n contin√∫e con una configuraci√≥n faltante.
      throw error; // Detener si la carga inicial falla.
    }
  }

  /**
   * Asegura que el directorio de configuraci√≥n existe
   * @private
   */
  ensureDirectoryExists() {
    // Construir la ruta absoluta basada en la ubicaci√≥n de este archivo (__dirname)
    const absoluteConfigDir = path.resolve(__dirname, path.dirname(this.configPath));
    console.log(`[ConfigLoader] ensureDirectoryExists: Verificando directorio: ${absoluteConfigDir}`); // Log

    if (!fs.existsSync(absoluteConfigDir)) {
      try {
        console.log(`[ConfigLoader] ensureDirectoryExists: Creando directorio: ${absoluteConfigDir}`); // Log
        fs.mkdirSync(absoluteConfigDir, { recursive: true });
        console.log(`[ConfigLoader] ensureDirectoryExists: Directorio creado con √©xito.`); // Log
      } catch (error) {
        // Este error es serio, ya que podr√≠a impedir guardar/leer config.
        console.error(`‚ùå [ConfigLoader] Error CR√çTICO al crear directorio ${absoluteConfigDir}:`, error.message);
        // Podr√≠a ser necesario lanzar un error aqu√≠ si el directorio es indispensable.
        // throw new Error(`No se pudo crear el directorio de configuraci√≥n: ${error.message}`);
      }
    } else {
      console.log(`[ConfigLoader] ensureDirectoryExists: El directorio ya existe.`); // Log
    }
  }


  /**
   * Busca el archivo de configuraci√≥n en varias ubicaciones posibles
   * @returns {string|null} - Ruta absoluta al archivo de configuraci√≥n o null si no se encuentra
   * @private
   */
  findConfigFile() {
    console.log("[ConfigLoader] findConfigFile: Buscando archivo de configuraci√≥n..."); // Log
    // Construye rutas absolutas desde la ubicaci√≥n actual de este archivo
    const possiblePaths = [
      path.resolve(__dirname, this.configPath), // Ruta relativa definida en constructor
      path.resolve(__dirname, "..", "jsons", "unified-config.json"), // Asumiendo estructura src/config/jsons
      // Puedes a√±adir m√°s rutas absolutas o relativas si es necesario
      // path.resolve(__dirname, "../../unified-config.json"), // Ejemplo: En la ra√≠z del proyecto
    ];

    for (const filePath of possiblePaths) {
      console.log(`[ConfigLoader] findConfigFile: Verificando ruta: ${filePath}`); // Log
      if (fs.existsSync(filePath)) {
        console.log(`[ConfigLoader] findConfigFile: Archivo encontrado en: ${filePath}`); // Log
        return filePath; // Devuelve la ruta absoluta encontrada
      }
    }

    console.error("[ConfigLoader] findConfigFile: ¬°Archivo de configuraci√≥n unified-config.json no encontrado en las rutas esperadas!"); // Log de error
    return null;
  }


  /**
   * Carga la configuraci√≥n de la aplicaci√≥n desde el archivo JSON unificado
   *
   * @returns {Object} - Configuraci√≥n cargada
   * @throws {Error} - Si hay errores al cargar o parsear el archivo de configuraci√≥n
   */
  loadConfiguration() {
    // Loguear inicio de carga/recarga
    const action = this.cachedConfig ? "Recargando" : "Cargando";
    console.log(`[ConfigLoader] loadConfiguration: ${action} configuraci√≥n...`); // Log 3 (Modificado)
    try {
      if (this.isCacheValid()) {
        console.log("[ConfigLoader] loadConfiguration: Usando configuraci√≥n en cach√© (v√°lida)."); // Log 4a
        return this.cachedConfig;
      }
      console.log("[ConfigLoader] loadConfiguration: Cach√© inv√°lida o inexistente, leyendo archivo..."); // Log 4b

      const configFilePath = this.findConfigFile();
      // findConfigFile ahora devuelve ruta absoluta o null
      if (!configFilePath) {
        // Lanzar error si no se encontr√≥ el archivo
        throw new Error("No se encontr√≥ el archivo de configuraci√≥n unificada (unified-config.json).");
      }
      console.log(`[ConfigLoader] loadConfiguration: Leyendo archivo desde: ${configFilePath}`); // Log 5

      const configData = fs.readFileSync(configFilePath, "utf8");
      console.log("[ConfigLoader] loadConfiguration: Archivo le√≠do, parseando JSON..."); // Log 6
      const unifiedConfig = JSON.parse(configData);
      console.log("[ConfigLoader] loadConfiguration: JSON parseado correctamente."); // Log 7

      // Determinar el entorno actual (0 = desarrollo, 1 = producci√≥n)
      const currentEnvIndex = unifiedConfig.environment?.current ?? 0; // Default a 0 si no existe
      const envLabels = unifiedConfig.environment?.labels ?? ["development", "production"]; // Defaults
      // Validar √≠ndice
      const currentEnv = (currentEnvIndex === 0 || currentEnvIndex === 1) ? currentEnvIndex : 0;
      const envLabel = envLabels[currentEnv];

      console.log(`[ConfigLoader] loadConfiguration: Entorno detectado: ${envLabel} (√≠ndice: ${currentEnv})`); // Log

      // *** Leer secretos desde variables de entorno ***
      // Es crucial que estas variables de entorno est√©n definidas donde corra la app
      const dbPasswordDev = process.env.DB_DEV_PASS || unifiedConfig.database?.development?.password;
      const dbPasswordProd = process.env.DB_PROD_PASS || unifiedConfig.database?.production?.password;
      const sendgridApiKey = process.env.SENDGRID_API_KEY || unifiedConfig.email?.sendgrid_api_key;
      const jwtSecret = process.env.JWT_SECRET || unifiedConfig.jwt?.secret;
      const dbHostDev = process.env.DB_DEV_HOST || unifiedConfig.database?.development?.host;
      const dbUserDev = process.env.DB_DEV_USER || unifiedConfig.database?.development?.username;
      const dbHostProd = process.env.DB_PROD_HOST || unifiedConfig.database?.production?.host;
      const dbUserProd = process.env.DB_PROD_USER || unifiedConfig.database?.production?.username;
      // A√±adir m√°s variables de entorno seg√∫n sea necesario (ej. Twilio SID/Token)

      // Construir objeto de configuraci√≥n usando valores de entorno si existen
      this.config = {
        database: {
          ...(envLabel === 'development' ? unifiedConfig.database?.development : unifiedConfig.database?.production),
          host: envLabel === 'development' ? dbHostDev : dbHostProd,
          username: envLabel === 'development' ? dbUserDev : dbUserProd,
          password: envLabel === 'development' ? dbPasswordDev : dbPasswordProd,
        },
        api: {
          shelly_cloud: unifiedConfig.api?.shelly_cloud,
          mapbox: unifiedConfig.api?.mapbox,
        },
        collection: { // Asegurar que existe la secci√≥n antes de acceder
          interval: unifiedConfig.api?.shelly_cloud?.collection_interval ?? 10000, // Default 10s
          retryAttempts: 3,
          retryDelay: 5000,
        },
        ubibot: unifiedConfig.ubibot,
        email: {
          ...(unifiedConfig.email ?? {}), // Copiar base si existe
          SENDGRID_API_KEY: sendgridApiKey, // Sobrescribir con variable de entorno
        },
        sms: unifiedConfig.sms, // Asumiendo que no hay secretos aqu√≠, si los hay, mover a env
        twilio: unifiedConfig.twilio, // Mover a env si contiene secretos
        jwt: {
          ...(unifiedConfig.jwt ?? {}),
          secret: jwtSecret, // Sobrescribir con variable de entorno
        },
        measurement: unifiedConfig.measurement,
        alertSystem: unifiedConfig.alertSystem,
        appInfo: unifiedConfig.appInfo,
        environment: { // Guardar el entorno resuelto
          current: currentEnv,
          name: envLabel
        }
      };

      // Guardar la ruta absoluta del archivo de configuraci√≥n usado
      this.currentConfigPath = configFilePath;

      // Validar la configuraci√≥n final construida
      this.validateConfig();
      console.log("[ConfigLoader] loadConfiguration: Configuraci√≥n validada."); // Log 8

      // Actualizar cach√©
      this.cachedConfig = this.config;
      this.lastLoadTime = Date.now();

      console.log(`‚úÖ [ConfigLoader] Configuraci√≥n cargada y cacheadada correctamente (Entorno: ${envLabel})`); // Log 9
      return this.config;

    } catch (error) {
      // Loguear el error antes de relanzarlo
      console.error(`‚ùå [ConfigLoader] Error fatal al cargar/parsear la configuraci√≥n: ${error.message}`);
      // Incluir detalles adicionales si es posible
      console.error(`   (Archivo intentado: ${this.currentConfigPath || 'No encontrado'})`);
      if (error instanceof SyntaxError) {
        console.error("   (El archivo unified-config.json podr√≠a tener un error de sintaxis JSON)");
      } else if (error.code === 'ENOENT') {
        console.error("   (Verifica que el archivo unified-config.json existe en las rutas buscadas)");
      }
      // Relanzar el error para que el proceso de arranque falle si la config es cr√≠tica
      throw new Error(`Error al cargar la configuraci√≥n: ${error.message}`);
    }
  }

  /**
   * Cambia el entorno actual (desarrollo/producci√≥n) y recarga la configuraci√≥n
   * IMPORTANTE: Modifica directamente el archivo unified-config.json
   *
   * @param {number} envIndex - 0 para desarrollo, 1 para producci√≥n
   * @returns {Object} - La nueva configuraci√≥n cargada
   */
  changeEnvironment(envIndex) {
    console.log(`[ConfigLoader] changeEnvironment: Solicitado cambio a entorno √≠ndice ${envIndex}`); // Log
    try {
      // Validar √≠ndice de entorno
      if (envIndex !== 0 && envIndex !== 1) {
        throw new Error("El √≠ndice de entorno debe ser 0 (desarrollo) o 1 (producci√≥n)");
      }

      // Asegurarse de tener la ruta al archivo actual
      const configFilePath = this.currentConfigPath || this.findConfigFile();
      if (!configFilePath) {
        throw new Error("No se pudo encontrar el archivo de configuraci√≥n para modificar el entorno.");
      }
      console.log(`[ConfigLoader] changeEnvironment: Modificando archivo: ${configFilePath}`); // Log

      // Leer el archivo de configuraci√≥n actual
      const configData = fs.readFileSync(configFilePath, "utf8");
      const unifiedConfig = JSON.parse(configData);

      // Verificar si el cambio es necesario
      if (unifiedConfig.environment?.current === envIndex) {
        console.log(`[ConfigLoader] changeEnvironment: El entorno ya est√° establecido en ${envIndex}. No se necesita cambio.`); // Log
        // Devolver la config actual (puede requerir recarga si la cach√© expir√≥)
        return this.loadConfiguration();
      }

      // Actualizar el √≠ndice de entorno en el objeto
      if (!unifiedConfig.environment) unifiedConfig.environment = {}; // Crear si no existe
      unifiedConfig.environment.current = envIndex;

      // Guardar el archivo actualizado (formato JSON con indentaci√≥n)
      fs.writeFileSync(configFilePath, JSON.stringify(unifiedConfig, null, 2), "utf8");
      console.log(`[ConfigLoader] changeEnvironment: Archivo unified-config.json actualizado con environment.current = ${envIndex}`); // Log

      // Limpiar cach√© y forzar recarga para aplicar el cambio inmediatamente
      this.cachedConfig = null;
      this.lastLoadTime = null;
      console.log("[ConfigLoader] changeEnvironment: Cach√© limpiada, recargando configuraci√≥n..."); // Log

      return this.loadConfiguration(); // Devolver la nueva configuraci√≥n cargada

    } catch (error) {
      console.error(`‚ùå [ConfigLoader] Error al cambiar de entorno a √≠ndice ${envIndex}:`, error.message);
      // Relanzar el error podr√≠a ser apropiado aqu√≠, ya que el estado podr√≠a ser inconsistente
      throw new Error(`Error al cambiar de entorno: ${error.message}`);
    }
  }


  /**
   * Validates the application's configuration to ensure all required fields are present.
   * Modificado para usar this.config directamente.
   * @throws {Error} If any required configuration fields are missing.
   */
  validateConfig() {
    console.log("[ConfigLoader] validateConfig: Validando configuraci√≥n cargada..."); // Log
    const configToValidate = this.config; // Usar la config ya construida en la instancia

    if (!configToValidate) {
      throw new Error("Intento de validar configuraci√≥n antes de que se haya cargado.");
    }

    // Validaci√≥n de base de datos
    const dbConfig = configToValidate.database;
    if (!dbConfig || !dbConfig.host || !dbConfig.port || !dbConfig.database || !dbConfig.username) {
      // La contrase√±a puede ser opcional o vac√≠a en algunos casos, pero los otros son esenciales
      console.error("Error de Validaci√≥n: Faltan campos requeridos en la configuraci√≥n de base de datos:", dbConfig);
      throw new Error("Configuraci√≥n de base de datos incompleta (host, port, database, username son requeridos)");
    }

    // Validaci√≥n de configuraci√≥n de API Shelly Cloud
    const shellyApi = configToValidate.api?.shelly_cloud;
    if (!shellyApi || !shellyApi.url || !shellyApi.device_id || !shellyApi.auth_key) {
      console.error("Error de Validaci√≥n: Faltan campos requeridos en api.shelly_cloud:", shellyApi);
      throw new Error("Configuraci√≥n de API Shelly Cloud incompleta (url, device_id, auth_key son requeridos)");
    }

    // Validaci√≥n de configuraci√≥n de mediciones (opcional, ajustar seg√∫n criticidad)
    const measurement = configToValidate.measurement;
    if (!measurement || measurement.precio_kwh === undefined || !measurement.intervalos?.medicion) {
      // Permitir precio 0, pero debe estar definido
      console.warn("Advertencia de Validaci√≥n: Configuraci√≥n de mediciones incompleta (precio_kwh, intervalos.medicion).");
      // throw new Error("Configuraci√≥n de mediciones incompleta"); // Descomentar si es cr√≠tico
    }

    // Validaci√≥n de configuraci√≥n de Ubibot (opcional, ajustar seg√∫n criticidad)
    const ubibot = configToValidate.ubibot;
    if (!ubibot || !ubibot.accountKey || !ubibot.tokenFile) {
      console.warn("Advertencia de Validaci√≥n: Configuraci√≥n de Ubibot incompleta (accountKey, tokenFile).");
      // throw new Error("Configuraci√≥n de Ubibot incompleta"); // Descomentar si es cr√≠tico
    }

    // Validaci√≥n de configuraci√≥n JWT
    if (!configToValidate.jwt || !configToValidate.jwt.secret) {
      // ¬°Muy cr√≠tico! Sin secreto JWT, la autenticaci√≥n fallar√°.
      console.error("Error de Validaci√≥n CR√çTICO: Falta la configuraci√≥n del secreto JWT (jwt.secret)");
      throw new Error("Falta la configuraci√≥n del secreto JWT");
    }

    // Validaci√≥n configuraci√≥n SMS (opcional, ajustar seg√∫n criticidad)
    const sms = configToValidate.sms;
    if (!sms || !sms.modem || !sms.modem.url) {
      console.warn("Advertencia de Validaci√≥n: Configuraci√≥n de SMS o URL del m√≥dem incompleta.");
      // throw new Error("Configuraci√≥n de SMS incompleta (modem.url es requerido)"); // Descomentar si es cr√≠tico
    }

    // Verificar configuraci√≥n de email (API Key ya se valida en loadConfiguration)
    const email = configToValidate.email;
    if (!email || !email.SENDGRID_API_KEY) {
      // Ya se valida que empiece con SG. en loadConfiguration, pero verificar existencia aqu√≠ tambi√©n
      console.error("Error de Validaci√≥n CR√çTICO: Falta la API Key de SendGrid (email.SENDGRID_API_KEY)");
      throw new Error("Falta la API Key de SendGrid en la configuraci√≥n");
    } else if (!email.SENDGRID_API_KEY.startsWith("SG.")) {
      console.warn("Advertencia de Validaci√≥n: La API Key de SendGrid no tiene el formato correcto.");
      // No lanzar error aqu√≠, ya que se advirti√≥ antes, pero es un posible problema.
    }
    if (!email.email_contacto?.from_verificado) {
      console.warn("Advertencia de Validaci√≥n: Email remitente (email.email_contacto.from_verificado) no configurado.");
    }

    console.log("[ConfigLoader] validateConfig: Validaci√≥n completada con √©xito."); // Log
  }


  /**
   * Obtiene la configuraci√≥n actual (carg√°ndola si es necesario o usando cach√©)
   * @returns {Object} Configuraci√≥n actual del sistema
   */
  getConfig() {
    // loadConfiguration maneja la cach√© internamente
    return this.loadConfiguration();
  }


  /**
   * Recarga todas las configuraciones invalidando la cach√©
   * @returns {Object} Nueva configuraci√≥n del sistema
   */
  reloadConfig() {
    console.log("[ConfigLoader] reloadConfig: Solicitud de recarga manual, limpiando cach√©..."); // Log
    this.cachedConfig = null;
    this.lastLoadTime = null;
    return this.loadConfiguration(); // Forzar relectura
  }


  /**
   * Obtiene un valor espec√≠fico de la configuraci√≥n usando notaci√≥n de punto
   * @param {string} path Ruta al valor (ejemplo: "database.host")
   * @returns {any} Valor encontrado en la ruta especificada o undefined si no existe
   */
  getValue(path) {
    if (!path || typeof path !== 'string') return undefined;

    try {
      // Usar la configuraci√≥n actual (posiblemente de cach√©)
      const currentConfig = this.getConfig();
      // Reducir la ruta
      return path.split(".").reduce((obj, key) => {
        // Verificar que obj no sea null o undefined antes de acceder a la key
        return obj && obj[key] !== undefined ? obj[key] : undefined;
      }, currentConfig);
    } catch (error) {
      // Esto no deber√≠a ocurrir con el reduce seguro, pero por si acaso
      console.warn(`[ConfigLoader] getValue: Error al acceder a la ruta "${path}":`, error.message);
      return undefined;
    }
  }


  /**
   * Verifica si existe una configuraci√≥n en la ruta especificada
   * @param {string} path Ruta a verificar
   * @returns {boolean} true si existe la configuraci√≥n
   */
  hasConfig(path) {
    return this.getValue(path) !== undefined;
  }


  /**
   * Obtiene el entorno actual (desarrollo/producci√≥n)
   * @returns {Object} Informaci√≥n del entorno actual { index: number, name: string }
   */
  getCurrentEnvironment() {
    // Asegurarse de que la config est√° cargada
    const currentConfig = this.getConfig();
    // Devolver el objeto de entorno guardado en la config
    return currentConfig.environment || { index: 0, name: 'development' }; // Fallback
  }


  /**
   * Actualiza un valor espec√≠fico en el archivo de configuraci√≥n unified-config.json
   * ¬°PRECAUCI√ìN! Modifica el archivo f√≠sico.
   * @param {string} path - Ruta al valor a actualizar (ejemplo: "email.email_contacto.from_verificado")
   * @param {any} value - Nuevo valor
   * @returns {boolean} - true si la actualizaci√≥n fue exitosa
   */
  updateConfigValue(path, value) {
    console.log(`[ConfigLoader] updateConfigValue: Solicitado actualizar "${path}" a "${value}"`); // Log
    try {
      // Necesitamos la ruta absoluta al archivo
      const configFilePath = this.currentConfigPath || this.findConfigFile();
      if (!configFilePath) {
        throw new Error("No se pudo encontrar el archivo de configuraci√≥n para actualizar.");
      }
      console.log(`[ConfigLoader] updateConfigValue: Modificando archivo: ${configFilePath}`); // Log

      // Leer el archivo actual
      const configData = fs.readFileSync(configFilePath, "utf8");
      const unifiedConfig = JSON.parse(configData);

      // Dividir la ruta y navegar/crear nodos intermedios
      const parts = path.split(".");
      let current = unifiedConfig;
      for (let i = 0; i < parts.length - 1; i++) {
        const key = parts[i];
        // Si el nodo intermedio no existe o no es un objeto, crearlo
        if (!current[key] || typeof current[key] !== 'object') {
          console.log(`[ConfigLoader] updateConfigValue: Creando nodo intermedio "${key}" en la ruta.`); // Log
          current[key] = {};
        }
        current = current[key];
      }

      // Actualizar el valor final
      const finalKey = parts[parts.length - 1];
      current[finalKey] = value;
      console.log(`[ConfigLoader] updateConfigValue: Valor en "${path}" establecido.`); // Log

      // Guardar el archivo actualizado con formato
      fs.writeFileSync(configFilePath, JSON.stringify(unifiedConfig, null, 2), "utf8");
      console.log(`[ConfigLoader] updateConfigValue: Archivo guardado.`); // Log

      // Limpiar cach√© y forzar recarga para aplicar el cambio
      this.cachedConfig = null;
      this.lastLoadTime = null;
      console.log("[ConfigLoader] updateConfigValue: Cach√© limpiada, recargando configuraci√≥n..."); // Log
      this.loadConfiguration(); // Recargar para actualizar la instancia en memoria

      console.log(`‚úÖ [ConfigLoader] updateConfigValue: Valor "${path}" actualizado correctamente en archivo y memoria.`); // Log
      return true;
    } catch (error) {
      console.error(`‚ùå [ConfigLoader] Error al actualizar valor "${path}":`, error.message);
      // No relanzar para no detener la aplicaci√≥n, pero indicar fallo
      return false;
    }
  }
}

// Exporta una √∫nica instancia para mantener el patr√≥n Singleton
module.exports = new ConfigLoader();